// This file is auto-generated by @hey-api/openapi-ts

export const $Contribution = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique identifier for the contribution record.',
            example: 'c1234-abcd-5678-efgh'
        },
        upload_id: {
            type: 'string',
            description: 'ID of the file upload from which the contribution was created (if applicable).'
        },
        employee_id: {
            type: 'string',
            description: 'Identifier for the employee associated with the contribution.',
            example: 'e9876-wxyz-4321-stuv'
        },
        payroll_id: {
            type: 'string',
            description: 'External identifier for the payroll job associated with the contribution.',
            example: 'p9876-wxyz-4321-stuv'
        },
        employer_contributions_amount: {
            type: 'number',
            description: "The amount of the employer's contribution for the given pay period.",
            example: 1000
        },
        employee_contributions_amount: {
            type: 'number',
            description: "The amount of the employee's contribution for the given pay period.",
            example: 250
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            description: 'The date and time the contribution record was created, in ISO 8601 format.',
            example: '2023-03-22T12:00:00Z',
            readOnly: true
        },
        pay_period_start_date: {
            type: 'string',
            format: 'date',
            description: 'The start date of the pay period for which the contributions were made, in YYYY-MM-DD format.',
            example: '2023-03-01'
        },
        pay_period_end_date: {
            type: 'string',
            format: 'date',
            description: 'The end date of the pay period for which the contributions were made, in YYYY-MM-DD format.',
            example: '2023-03-15'
        },
        status: {
            type: 'string',
            description: `The current status of the contribution. Possible values are: - \`Pending\`: The contribution is pending and has not yet been processed. - \`Processing\`: The contribution is currently being processed. - \`Processed\`: The contribution has been successfully processed. - \`Cancelled\`: The contribution has been cancelled. - \`Deleted\`: The contribution has been deleted. - \`NotSubmitted\`: The contribution has not been submitted.
`,
            enum: ['Pending', 'Processing', 'Processed', 'Cancelled', 'Deleted', 'NotSubmitted'],
            example: 'Pending'
        }
    },
    required: ['id', 'employee_id', 'payroll_id', 'employer_contributions_amount', 'employee_contributions_amount', 'created_at', 'pay_period_start_date', 'pay_period_end_date', 'status']
} as const;

export const $PaginatedContributions = {
    type: 'object',
    properties: {
        pageNumber: {
            type: 'integer',
            description: 'The current page number.',
            example: 1
        },
        pageSize: {
            type: 'integer',
            description: 'The number of items per page.',
            example: 200
        },
        totalItems: {
            type: 'integer',
            description: 'The total number of items available.',
            example: 1
        },
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Contribution'
            },
            description: 'An array of Contribution objects on the current page.'
        }
    }
} as const;

export const $ContributionCreateResponse = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Contribution'
            },
            description: 'An array of Contribution objects that were created.'
        }
    }
} as const;

export const $ContributionBody = {
    type: 'object',
    properties: {
        employee_id: {
            type: 'string',
            description: 'Identifier for the employee associated with the contribution.',
            example: 'e9876-wxyz-4321-stuv'
        },
        payroll_id: {
            type: 'string',
            description: 'External identifier for the payroll job associated with the contribution.',
            example: 'p9876-wxyz-4321-stuv'
        },
        employer_contributions_amount: {
            type: 'number',
            description: "The updated amount of the employer's contribution for the given pay period.",
            example: 1200,
            format: 'money'
        },
        employee_contributions_amount: {
            type: 'number',
            description: "The updated amount of the employee's contribution for the given pay period.",
            example: 300,
            format: 'money'
        },
        pay_period_start_date: {
            type: 'string',
            format: 'date',
            description: 'The start date of the pay period for which the contributions were made, in YYYY-MM-DD format.',
            example: '2023-03-01'
        },
        pay_period_end_date: {
            type: 'string',
            format: 'date',
            description: 'The end date of the pay period for which the contributions were made, in YYYY-MM-DD format.',
            example: '2023-03-15'
        }
    },
    required: ['employee_id', 'payroll_id', 'employer_contributions_amount', 'employee_contributions_amount', 'pay_period_start_date', 'pay_period_end_date']
} as const;

export const $ContributionUpdateBody = {
    type: 'object',
    properties: {
        employee_id: {
            type: 'string',
            description: 'Identifier for the employee associated with the contribution.',
            example: 'e9876-wxyz-4321-stuv'
        },
        payroll_id: {
            type: 'string',
            description: 'External identifier for the payroll job associated with the contribution.',
            example: 'p9876-wxyz-4321-stuv'
        },
        employer_contributions_amount: {
            type: 'number',
            description: "The updated amount of the employer's contribution for the given pay period.",
            example: 1200,
            format: 'money'
        },
        employee_contributions_amount: {
            type: 'number',
            description: "The updated amount of the employee's contribution for the given pay period.",
            example: 300,
            format: 'money'
        },
        pay_period_start_date: {
            type: 'string',
            format: 'date',
            description: 'The start date of the pay period for which the contributions were made, in YYYY-MM-DD format.',
            example: '2023-03-01'
        },
        pay_period_end_date: {
            type: 'string',
            format: 'date',
            description: 'The end date of the pay period for which the contributions were made, in YYYY-MM-DD format.',
            example: '2023-03-15'
        }
    },
    required: ['employee_id']
} as const;

export const $Employer = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'The unique identifier for the employer.',
            example: 'e1234-abcd-5678-efgh',
            readOnly: true
        },
        created_at: {
            type: 'string',
            description: 'The date and time the employee record was created, in ISO 8601 format.',
            example: '2023-03-01T12:00:00Z',
            format: 'date-time',
            readOnly: true
        },
        updated_at: {
            type: 'string',
            description: 'The date and time the employee record was last updated, in ISO 8601 format.',
            example: '2023-03-15T12:00:00Z',
            format: 'date-time',
            readOnly: true
        },
        name: {
            type: 'string',
            description: 'The name of the employer.',
            example: 'Acme Corp.'
        },
        contributionBasis: {
            type: 'string',
            description: 'The basis on which the employer makes pension contributions.',
            enum: ['QualifyingEarnings', 'TotalPay', 'BasicPay'],
            example: 'QualifyingEarnings'
        },
        allowsSalarySacrifice: {
            type: 'boolean',
            description: 'Whether the employer allows for salary sacrifice.',
            example: false,
            default: false
        },
        defaultPlan: {
            type: 'string',
            nullable: true,
            default: 'StandardLifetime',
            description: 'The default pension plan for the employer.',
            enum: ['StandardLifetime', 'SustainableLifetime'],
            example: 'StandardLifetime'
        },
        externalReference: {
            type: 'string',
            description: 'An external reference for the employer. Should be used as the value in the EmployerId column in file uploads.',
            example: 'ABC123'
        },
        paymentMethod: {
            type: 'string',
            enum: ['BankTransfer', 'DirectDebit'],
            nullable: true,
            default: 'DirectDebit',
            description: 'The payment method used by the employer.'
        },
        phone: {
            type: 'string',
            nullable: true,
            description: 'The phone number of the employer.',
            example: '0777777777777'
        },
        primaryContactEmail: {
            type: 'string',
            nullable: true,
            description: 'The email address of the primary contact for the employer.',
            example: 'john.doe@example.com',
            format: 'email'
        },
        stagingDate: {
            type: 'string',
            format: 'date-time',
            nullable: true,
            description: 'The staging date for the employer, in ISO 8601 format.',
            example: '2023-03-01T12:00:00Z'
        },
        status: {
            description: 'The status of the employer.',
            example: 'Active',
            default: 'PendingPa',
            enum: ['PendingPa', 'PaSent', 'Signed', 'PendingAml', 'Active'],
            readOnly: true
        },
        statusUpdatedAt: {
            type: 'string',
            format: 'date-time',
            description: 'The date and time the employer status was last updated, in ISO 8601 format.',
            example: '2023-03-15T12:00:00Z',
            readOnly: true
        },
        tprCode: {
            type: 'string',
            nullable: true,
            description: "The employer's code with The Pensions Regulator.",
            example: 'ABC123'
        }
    }
} as const;

export const $EmployerCreateBody = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: 'The name of the employer.',
            example: 'Acme Corp.'
        },
        contributionBasis: {
            type: 'string',
            description: 'The basis on which the employer makes pension contributions.',
            enum: ['QualifyingEarnings', 'TotalPay', 'BasicPay'],
            example: 'QualifyingEarnings'
        },
        allowsSalarySacrifice: {
            type: 'boolean',
            description: 'Whether the employer allows for salary sacrifice.',
            example: false,
            default: false
        },
        defaultPlan: {
            type: 'string',
            nullable: true,
            default: 'StandardLifetime',
            description: 'The default pension plan for the employer.',
            enum: ['StandardLifetime', 'SustainableLifetime'],
            example: 'StandardLifetime'
        },
        externalReference: {
            type: 'string',
            description: 'An external reference for the employer.',
            example: 'ABC123'
        },
        paymentMethod: {
            type: 'string',
            enum: ['BankTransfer', 'DirectDebit'],
            nullable: true,
            default: 'DirectDebit',
            description: 'The payment method used by the employer.'
        },
        phone: {
            type: 'string',
            nullable: true,
            description: 'The phone number of the employer.',
            example: '0777777777777'
        },
        primaryContactEmail: {
            type: 'string',
            description: 'The email address of the primary contact for the employer.',
            example: 'john.doe@example.com',
            format: 'email'
        },
        stagingDate: {
            type: 'string',
            format: 'date-time',
            nullable: true,
            description: 'The staging date for the employer, in ISO 8601 format.',
            example: '2023-03-01T12:00:00Z'
        }
    },
    required: ['name', 'contributionBasis', 'externalReference', 'primaryContactEmail']
} as const;

export const $EmployerUpdateBody = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: 'The name of the employer.',
            example: 'Acme Corp.'
        },
        contributionBasis: {
            type: 'string',
            description: 'The basis on which the employer makes pension contributions.',
            enum: ['QualifyingEarnings', 'TotalPay', 'BasicPay'],
            example: 'QualifyingEarnings'
        },
        allowsSalarySacrifice: {
            type: 'boolean',
            description: 'Whether the employer allows for salary sacrifice.',
            example: false
        },
        defaultPlan: {
            type: 'string',
            nullable: true,
            description: 'The default pension plan for the employer.',
            enum: ['StandardLifetime', 'SustainableLifetime'],
            example: 'StandardLifetime'
        },
        externalReference: {
            type: 'string',
            description: 'An external reference for the employer.',
            example: 'ABC123'
        },
        paymentMethod: {
            type: 'string',
            enum: ['BankTransfer', 'DirectDebit'],
            nullable: true,
            description: 'The payment method used by the employer.'
        },
        phone: {
            type: 'string',
            nullable: true,
            description: 'The phone number of the employer.',
            example: '0777777777777'
        },
        primaryContactEmail: {
            type: 'string',
            description: 'The email address of the primary contact for the employer.',
            example: 'john.doe@example.com',
            format: 'email'
        },
        stagingDate: {
            type: 'string',
            format: 'date-time',
            nullable: true,
            description: 'The staging date for the employer, in ISO 8601 format.',
            example: '2023-03-01T12:00:00Z'
        }
    }
} as const;

export const $PaginatedEmployers = {
    type: 'object',
    properties: {
        pageNumber: {
            type: 'integer',
            description: 'The current page number.',
            example: 1
        },
        pageSize: {
            type: 'integer',
            description: 'The number of employers per page.',
            example: 10
        },
        totalItems: {
            type: 'integer',
            description: 'The total number of employers available.',
            example: 100
        },
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Employer'
            },
            description: 'An array of employer objects on the current page.'
        }
    }
} as const;

export const $Employee = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique identifier for the employee.',
            example: 'e1234-abcd-5678-efgh',
            readOnly: true
        },
        upload_id: {
            type: 'string',
            description: 'ID of the file upload from which the employee was created (if applicable).'
        },
        employer_id: {
            type: 'string',
            description: 'Identifier for the employer associated with the employee.',
            example: 'r9876-wxyz-4321-stuv'
        },
        email: {
            type: 'string',
            description: 'Email address of the employee.',
            example: 'john.doe@example.com',
            format: 'email'
        },
        created_at: {
            type: 'string',
            description: 'The date and time the employee record was created, in ISO 8601 format.',
            example: '2023-03-01T12:00:00Z',
            format: 'date-time',
            readOnly: true
        },
        updated_at: {
            type: 'string',
            description: 'The date and time the employee record was last updated, in ISO 8601 format.',
            example: '2023-03-15T12:00:00Z',
            format: 'date-time',
            readOnly: true
        },
        forename: {
            type: 'string',
            description: "The employee's first name.",
            example: 'John'
        },
        surname: {
            type: 'string',
            description: "The employee's last name.",
            example: 'Doe'
        },
        title: {
            type: 'string',
            description: "The employee's title, e.g., Mr., Mrs., Dr., etc.",
            example: 'Mr.'
        },
        date_of_birth: {
            type: 'string',
            description: "The employee's date of birth, in YYYY-MM-DD format.",
            example: '1990-01-01',
            format: 'date'
        },
        address_line1: {
            type: 'string',
            description: "The first line of the employee's address.",
            example: '123 Main Street'
        },
        postcode: {
            type: 'string',
            description: "The postal code of the employee's address.",
            example: 'AB12 3CD'
        },
        national_insurance_number: {
            type: 'string',
            description: "The employee's National Insurance number.",
            example: 'AA123456C'
        },
        employment_start_date: {
            type: 'string',
            description: 'The date the employee started their employment, in YYYY-MM-DD format.',
            example: '2023-01-01',
            format: 'date'
        },
        exit_date: {
            type: 'string',
            description: "The date the employee's employment ended, in YYYY-MM-DD format (if applicable).",
            example: '2023-12-31',
            format: 'date'
        },
        opt_out_date: {
            type: 'string',
            description: 'The date the employee opted out of the pension scheme, in YYYY-MM-DD format (if applicable).',
            example: null,
            format: 'date'
        },
        opt_in_date: {
            type: 'string',
            description: 'The date the employee opted into the pension scheme, in YYYY-MM-DD format (if applicable).',
            example: null,
            format: 'date'
        }
    },
    additionalProperties: false,
    required: ['email', 'date_of_birth', 'forename', 'surname', 'title', 'address_line1', 'postcode', 'national_insurance_number', 'employment_start_date', 'created_at', 'updated_at', 'exit_date', 'opt_out_date', 'opt_in_date']
} as const;

export const $PaginatedEmployees = {
    type: 'object',
    properties: {
        pageNumber: {
            type: 'integer',
            description: 'The current page number.',
            example: 1
        },
        pageSize: {
            type: 'integer',
            description: 'The number of items per page.',
            example: 200
        },
        totalItems: {
            type: 'integer',
            description: 'The total number of items available.',
            example: 1
        },
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Employee'
            },
            description: 'An array of Employee objects on the current page.'
        }
    },
    required: ['pageNumber', 'pageSize', 'totalItems', 'items']
} as const;

export const $EmployeeCreateBody = {
    type: 'object',
    properties: {
        email: {
            type: 'string',
            description: 'Email address of the employee.',
            example: 'john.doe@example.com',
            format: 'email'
        },
        forename: {
            type: 'string',
            description: "The employee's first name.",
            example: 'John'
        },
        surname: {
            type: 'string',
            description: "The employee's last name.",
            example: 'Doe'
        },
        title: {
            type: 'string',
            description: "The employee's title, e.g. Mr., Mrs., Dr., etc.",
            example: 'Mr.'
        },
        date_of_birth: {
            type: 'string',
            description: "The employee's date of birth, in YYYY-MM-DD format.",
            example: '1990-01-01',
            format: 'date'
        },
        address_line1: {
            type: 'string',
            description: "The first line of the employee's address.",
            example: '123 Main Street'
        },
        postcode: {
            type: 'string',
            description: "The postal code of the employee's address.",
            example: 'AB12 3CD'
        },
        national_insurance_number: {
            type: 'string',
            description: "The employee's National Insurance number.",
            example: 'AA123456C',
            format: 'national_insurance_number'
        },
        employment_start_date: {
            type: 'string',
            description: 'The date the employee started their employment, in YYYY-MM-DD format.',
            example: '2023-01-01',
            format: 'date'
        }
    },
    required: ['email', 'date_of_birth', 'forename', 'surname', 'title', 'address_line1', 'postcode', 'national_insurance_number', 'employment_start_date']
} as const;

export const $EmployeeUpdateBody = {
    type: 'object',
    properties: {
        email: {
            type: 'string',
            description: 'Email address of the employee.',
            example: 'john.doe@example.com',
            format: 'email'
        },
        forename: {
            type: 'string',
            description: "The employee's first name.",
            example: 'John'
        },
        surname: {
            type: 'string',
            description: "The employee's last name.",
            example: 'Doe'
        },
        title: {
            type: 'string',
            description: "The employee's title, e.g., Mr., Mrs., Dr., etc.",
            example: 'Mr.'
        },
        date_of_birth: {
            type: 'string',
            description: "The employee's date of birth, in YYYY-MM-DD format.",
            example: '1990-01-01',
            format: 'date'
        },
        address_line1: {
            type: 'string',
            description: "The first line of the employee's address.",
            example: '123 Main Street'
        },
        postcode: {
            type: 'string',
            description: "The postal code of the employee's address.",
            example: 'AB12 3CD'
        },
        national_insurance_number: {
            type: 'string',
            description: "The employee's National Insurance number.",
            example: 'AA123456C',
            format: 'national_insurance_number'
        },
        employment_start_date: {
            type: 'string',
            description: 'The date the employee started their employment, in YYYY-MM-DD format.',
            example: '2023-01-01'
        },
        exit_date: {
            type: 'string',
            description: "The date the employee's employment ended, in YYYY-MM-DD format (if applicable).",
            example: '2023-12-31',
            format: 'date'
        },
        opt_out_date: {
            type: 'string',
            description: 'The date the employee opted out of the pension scheme, in YYYY-MM-DD format (if applicable).',
            example: '2023-06-01',
            format: 'date'
        },
        opt_in_date: {
            type: 'string',
            description: 'The date the employee opted into the pension scheme, in YYYY-MM-DD format (if applicable).',
            example: '2023-07-01',
            format: 'date'
        }
    }
} as const;

export const $Error = {
    type: 'object',
    properties: {
        error: {
            type: 'string',
            description: 'A descriptive error message.',
            example: 'Bad request: invalid data provided.'
        }
    }
} as const;

export const $ValidationError = {
    type: 'object',
    properties: {
        error: {
            type: 'string',
            description: 'A descriptive error message.',
            example: 'Bad request: invalid data provided.'
        },
        validation_errors: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: {
                        type: 'string',
                        description: 'The name of the field that failed validation.',
                        example: 'email'
                    },
                    message: {
                        type: 'string',
                        description: 'A descriptive error message.',
                        example: 'Email address is invalid.'
                    }
                },
                required: ['field', 'message']
            }
        }
    }
} as const;

export const $InitiateUploadBody = {
    type: 'object',
    properties: {
        filename: {
            type: 'string',
            description: 'The filename of the upload.',
            example: 'papdis.csv'
        },
        purpose: {
            type: 'string',
            description: 'The purpose of the file upload. If "contribution", both contributions and enrolments will be processed. If "enrolment", only enrolments will be processed.',
            example: 'contribution',
            enum: ['contribution', 'enrolment']
        }
    },
    required: ['filename', 'purpose']
} as const;

export const $Upload = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'ID of the upload.'
        },
        putDestinationUrl: {
            type: 'string',
            description: 'Destination URL where the actual file should be sent, using a PUT request. Only present when status is AwaitingFile. We recommend using the AWS S3 client SDK to perform the upload.',
            nullable: true
        },
        createdAt: {
            type: 'string',
            format: 'date-time',
            description: 'Datetime the upload was created.'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time',
            description: 'Datetime the upload was last updated.'
        },
        processingStarted: {
            type: 'string',
            nullable: true,
            format: 'date-time',
            description: 'Datetime of when processing of the file began.',
            example: '2023-03-01T11:00:00Z'
        },
        processingEnded: {
            type: 'string',
            format: 'date-time',
            nullable: true,
            description: 'Datetime of when processing of the file ended, or null if it has not ended.',
            example: '2023-03-01T12:00:00Z'
        },
        processingTime: {
            type: 'number',
            description: 'The number of seconds it took to process the file end-to-end (if applicable).',
            example: 47,
            nullable: true
        },
        totalErrors: {
            type: 'number',
            description: 'The number of errors produced in processing the file. Zero if there are none or processing is not finished. Use the `{upload_id}/errors` endpoint to retrieve detailed information of the errors.',
            example: 10
        },
        contributionsCreated: {
            type: 'number',
            description: 'The number of contributions created during processing. Zero if processing is not finished.',
            example: 5
        },
        contributionsUnprocessed: {
            type: 'number',
            description: 'The number of contributions that failed to be created during processing. Zero if processing is not finished.',
            example: 0
        },
        contributionsAlreadyExisted: {
            type: 'number',
            description: 'The number of contributions that already existed prior to processing, and which have been skipped during processing of the upload. Zero if processing is not finished.',
            example: 0
        },
        employerContributions: {
            type: 'number',
            description: 'The total of employer contributions created for the upload, excluding contributions that already existed. Zero if processing is not finished.',
            example: '500.34'
        },
        employeeContributions: {
            type: 'number',
            description: 'The total of employee contributions created for the upload, excluding contributions that already existed. Zero if processing is not finished.',
            example: '734.11'
        },
        totalContributions: {
            type: 'number',
            description: 'The total of contributions created for the upload, excluding contributions that already existed. Zero if processing is not finished.',
            example: '1234.45'
        },
        filename: {
            type: 'string',
            description: 'The filename of the uploaded file (if applicable).',
            example: 'papdis.csv',
            nullable: true
        },
        status: {
            type: 'string',
            description: 'The status of the upload. Error indicates the file was not able to be processed. PartiallyProcessed indicates that some but not all contributions or enrolments were created. To retrieve the errors for an Error or PartiallyProcessed file upload, use the `/upload/{upload_id}/errors` endpoint.',
            example: 'Processed',
            enum: ['AwaitingFile', 'ReceivedFile', 'Processing', 'Processed', 'Error', 'Timeout', 'PartiallyProcessed']
        }
    },
    required: ['id', 'putDestinationUrl', 'status', 'updatedAt', 'createdAt', 'processingStarted', 'processingEnded', 'processingTime', 'totalErrors', 'contributionsCreated', 'contributionsAlreadyExisted', 'employerContributions', 'employeeContributions', 'totalContributions', 'filename']
} as const;

export const $PaginatedUploads = {
    type: 'object',
    properties: {
        pageNumber: {
            type: 'integer',
            description: 'The current page number.',
            example: 1
        },
        pageSize: {
            type: 'integer',
            description: 'The number of items per page.',
            example: 200
        },
        totalItems: {
            type: 'integer',
            description: 'The total number of items available.',
            example: 1
        },
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Upload'
            },
            description: 'An array of Upload objects on the current page.'
        }
    }
} as const;

export const $UploadError = {
    type: 'object',
    properties: {
        upload_id: {
            type: 'string',
            description: 'ID of the upload where the error occurred.'
        },
        row_index: {
            type: 'number',
            description: 'The row in the file where the error occurred. Starting at row 1, the first non-header row.'
        },
        code: {
            type: 'string',
            description: 'An identifier for the class of the error.',
            enum: ['NationalInsuranceNumberInvalid']
        },
        message: {
            type: 'string',
            description: 'Human readable error message to help diagnose the issue.'
        }
    }
} as const;

export const $PaginatedUploadErrors = {
    type: 'object',
    properties: {
        pageNumber: {
            type: 'integer',
            description: 'The current page number.',
            example: 1
        },
        pageSize: {
            type: 'integer',
            description: 'The number of items per page.',
            example: 200
        },
        totalItems: {
            type: 'integer',
            description: 'The total number of items available.',
            example: 1
        },
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/UploadError'
            },
            description: 'An array of UploadError objects on the current page.'
        }
    }
} as const;