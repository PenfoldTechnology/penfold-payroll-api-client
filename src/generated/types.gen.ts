// This file is auto-generated by @hey-api/openapi-ts

export type Contribution = {
    /**
     * Unique identifier for the contribution record.
     */
    id: string;
    /**
     * ID of the file upload from which the contribution was created (if applicable).
     */
    upload_id?: string;
    /**
     * Identifier for the employee associated with the contribution.
     */
    employee_id: string;
    /**
     * External identifier for the payroll job associated with the contribution.
     */
    payroll_id: string;
    /**
     * The amount of the employer's contribution for the given pay period.
     */
    employer_contributions_amount: number;
    /**
     * The amount of the employee's contribution for the given pay period.
     */
    employee_contributions_amount: number;
    /**
     * The date and time the contribution record was created, in ISO 8601 format.
     */
    readonly created_at: string;
    /**
     * The start date of the pay period for which the contributions were made, in YYYY-MM-DD format.
     */
    pay_period_start_date: string;
    /**
     * The end date of the pay period for which the contributions were made, in YYYY-MM-DD format.
     */
    pay_period_end_date: string;
    /**
     * The current status of the contribution. Possible values are: - `Pending`: The contribution is pending and has not yet been processed. - `Processing`: The contribution is currently being processed. - `Processed`: The contribution has been successfully processed. - `Cancelled`: The contribution has been cancelled. - `Deleted`: The contribution has been deleted. - `NotSubmitted`: The contribution has not been submitted.
     *
     */
    status: 'Pending' | 'Processing' | 'Processed' | 'Cancelled' | 'Deleted' | 'NotSubmitted';
};

/**
 * The current status of the contribution. Possible values are: - `Pending`: The contribution is pending and has not yet been processed. - `Processing`: The contribution is currently being processed. - `Processed`: The contribution has been successfully processed. - `Cancelled`: The contribution has been cancelled. - `Deleted`: The contribution has been deleted. - `NotSubmitted`: The contribution has not been submitted.
 *
 */
export type status = 'Pending' | 'Processing' | 'Processed' | 'Cancelled' | 'Deleted' | 'NotSubmitted';

export type PaginatedContributions = {
    /**
     * The current page number.
     */
    pageNumber?: number;
    /**
     * The number of items per page.
     */
    pageSize?: number;
    /**
     * The total number of items available.
     */
    totalItems?: number;
    /**
     * An array of Contribution objects on the current page.
     */
    items?: Array<Contribution>;
};

export type ContributionCreateResponse = {
    /**
     * An array of Contribution objects that were created.
     */
    items?: Array<Contribution>;
};

export type ContributionBody = {
    /**
     * Identifier for the employee associated with the contribution.
     */
    employee_id: string;
    /**
     * External identifier for the payroll job associated with the contribution.
     */
    payroll_id: string;
    /**
     * The updated amount of the employer's contribution for the given pay period.
     */
    employer_contributions_amount: number;
    /**
     * The updated amount of the employee's contribution for the given pay period.
     */
    employee_contributions_amount: number;
    /**
     * The start date of the pay period for which the contributions were made, in YYYY-MM-DD format.
     */
    pay_period_start_date: string;
    /**
     * The end date of the pay period for which the contributions were made, in YYYY-MM-DD format.
     */
    pay_period_end_date: string;
};

export type ContributionUpdateBody = {
    /**
     * Identifier for the employee associated with the contribution.
     */
    employee_id: string;
    /**
     * External identifier for the payroll job associated with the contribution.
     */
    payroll_id?: string;
    /**
     * The updated amount of the employer's contribution for the given pay period.
     */
    employer_contributions_amount?: number;
    /**
     * The updated amount of the employee's contribution for the given pay period.
     */
    employee_contributions_amount?: number;
    /**
     * The start date of the pay period for which the contributions were made, in YYYY-MM-DD format.
     */
    pay_period_start_date?: string;
    /**
     * The end date of the pay period for which the contributions were made, in YYYY-MM-DD format.
     */
    pay_period_end_date?: string;
};

export type Employer = {
    /**
     * The unique identifier for the employer.
     */
    readonly id?: string;
    /**
     * The date and time the employee record was created, in ISO 8601 format.
     */
    readonly created_at?: string;
    /**
     * The date and time the employee record was last updated, in ISO 8601 format.
     */
    readonly updated_at?: string;
    /**
     * The name of the employer.
     */
    name?: string;
    /**
     * The basis on which the employer makes pension contributions.
     */
    contributionBasis?: 'QualifyingEarnings' | 'TotalPay' | 'BasicPay';
    /**
     * Whether the employer allows for salary sacrifice.
     */
    allowsSalarySacrifice?: boolean;
    /**
     * The default pension plan for the employer.
     */
    defaultPlan?: 'StandardLifetime' | 'SustainableLifetime' | null;
    /**
     * An external reference for the employer. Should be used as the value in the EmployerId column in file uploads.
     */
    externalReference?: string;
    /**
     * The payment method used by the employer.
     */
    paymentMethod?: 'BankTransfer' | 'DirectDebit' | null;
    /**
     * The phone number of the employer.
     */
    phone?: string | null;
    /**
     * The email address of the primary contact for the employer.
     */
    primaryContactEmail?: string | null;
    /**
     * The staging date for the employer, in ISO 8601 format.
     */
    stagingDate?: string | null;
    /**
     * The status of the employer.
     */
    readonly status?: 'PendingPa' | 'PaSent' | 'Signed' | 'PendingAml' | 'Active';
    /**
     * The date and time the employer status was last updated, in ISO 8601 format.
     */
    readonly statusUpdatedAt?: string;
    /**
     * The employer's code with The Pensions Regulator.
     */
    tprCode?: string | null;
};

/**
 * The basis on which the employer makes pension contributions.
 */
export type contributionBasis = 'QualifyingEarnings' | 'TotalPay' | 'BasicPay';

/**
 * The default pension plan for the employer.
 */
export type defaultPlan = 'StandardLifetime' | 'SustainableLifetime';

/**
 * The payment method used by the employer.
 */
export type paymentMethod = 'BankTransfer' | 'DirectDebit';

/**
 * The status of the employer.
 */
export type status2 = 'PendingPa' | 'PaSent' | 'Signed' | 'PendingAml' | 'Active';

export type EmployerCreateBody = {
    /**
     * The name of the employer.
     */
    name: string;
    /**
     * The basis on which the employer makes pension contributions.
     */
    contributionBasis: 'QualifyingEarnings' | 'TotalPay' | 'BasicPay';
    /**
     * Whether the employer allows for salary sacrifice.
     */
    allowsSalarySacrifice?: boolean;
    /**
     * The default pension plan for the employer.
     */
    defaultPlan?: 'StandardLifetime' | 'SustainableLifetime' | null;
    /**
     * An external reference for the employer.
     */
    externalReference: string;
    /**
     * The payment method used by the employer.
     */
    paymentMethod?: 'BankTransfer' | 'DirectDebit' | null;
    /**
     * The phone number of the employer.
     */
    phone?: string | null;
    /**
     * The email address of the primary contact for the employer.
     */
    primaryContactEmail: string;
    /**
     * The staging date for the employer, in ISO 8601 format.
     */
    stagingDate?: string | null;
};

export type EmployerUpdateBody = {
    /**
     * The name of the employer.
     */
    name?: string;
    /**
     * The basis on which the employer makes pension contributions.
     */
    contributionBasis?: 'QualifyingEarnings' | 'TotalPay' | 'BasicPay';
    /**
     * Whether the employer allows for salary sacrifice.
     */
    allowsSalarySacrifice?: boolean;
    /**
     * The default pension plan for the employer.
     */
    defaultPlan?: 'StandardLifetime' | 'SustainableLifetime' | null;
    /**
     * An external reference for the employer.
     */
    externalReference?: string;
    /**
     * The payment method used by the employer.
     */
    paymentMethod?: 'BankTransfer' | 'DirectDebit' | null;
    /**
     * The phone number of the employer.
     */
    phone?: string | null;
    /**
     * The email address of the primary contact for the employer.
     */
    primaryContactEmail?: string;
    /**
     * The staging date for the employer, in ISO 8601 format.
     */
    stagingDate?: string | null;
};

export type PaginatedEmployers = {
    /**
     * The current page number.
     */
    pageNumber?: number;
    /**
     * The number of employers per page.
     */
    pageSize?: number;
    /**
     * The total number of employers available.
     */
    totalItems?: number;
    /**
     * An array of employer objects on the current page.
     */
    items?: Array<Employer>;
};

export type Employee = {
    /**
     * Unique identifier for the employee.
     */
    readonly id?: string;
    /**
     * ID of the file upload from which the employee was created (if applicable).
     */
    upload_id?: string;
    /**
     * Identifier for the employer associated with the employee.
     */
    employer_id?: string;
    /**
     * Email address of the employee.
     */
    email: string;
    /**
     * The date and time the employee record was created, in ISO 8601 format.
     */
    readonly created_at: string;
    /**
     * The date and time the employee record was last updated, in ISO 8601 format.
     */
    readonly updated_at: string;
    /**
     * The employee's first name.
     */
    forename: string;
    /**
     * The employee's last name.
     */
    surname: string;
    /**
     * The employee's title, e.g., Mr., Mrs., Dr., etc.
     */
    title: string;
    /**
     * The employee's date of birth, in YYYY-MM-DD format.
     */
    date_of_birth: string;
    /**
     * The first line of the employee's address.
     */
    address_line1: string;
    /**
     * The postal code of the employee's address.
     */
    postcode: string;
    /**
     * The employee's National Insurance number.
     */
    national_insurance_number: string;
    /**
     * The date the employee started their employment, in YYYY-MM-DD format.
     */
    employment_start_date: string;
    /**
     * The date the employee's employment ended, in YYYY-MM-DD format (if applicable).
     */
    exit_date: string;
    /**
     * The date the employee opted out of the pension scheme, in YYYY-MM-DD format (if applicable).
     */
    opt_out_date: string;
    /**
     * The date the employee opted into the pension scheme, in YYYY-MM-DD format (if applicable).
     */
    opt_in_date: string;
};

export type PaginatedEmployees = {
    /**
     * The current page number.
     */
    pageNumber: number;
    /**
     * The number of items per page.
     */
    pageSize: number;
    /**
     * The total number of items available.
     */
    totalItems: number;
    /**
     * An array of Employee objects on the current page.
     */
    items: Array<Employee>;
};

export type EmployeeCreateBody = {
    /**
     * Email address of the employee.
     */
    email: string;
    /**
     * The employee's first name.
     */
    forename: string;
    /**
     * The employee's last name.
     */
    surname: string;
    /**
     * The employee's title, e.g. Mr., Mrs., Dr., etc.
     */
    title: string;
    /**
     * The employee's date of birth, in YYYY-MM-DD format.
     */
    date_of_birth: string;
    /**
     * The first line of the employee's address.
     */
    address_line1: string;
    /**
     * The postal code of the employee's address.
     */
    postcode: string;
    /**
     * The employee's National Insurance number.
     */
    national_insurance_number: string;
    /**
     * The date the employee started their employment, in YYYY-MM-DD format.
     */
    employment_start_date: string;
};

export type EmployeeUpdateBody = {
    /**
     * Email address of the employee.
     */
    email?: string;
    /**
     * The employee's first name.
     */
    forename?: string;
    /**
     * The employee's last name.
     */
    surname?: string;
    /**
     * The employee's title, e.g., Mr., Mrs., Dr., etc.
     */
    title?: string;
    /**
     * The employee's date of birth, in YYYY-MM-DD format.
     */
    date_of_birth?: string;
    /**
     * The first line of the employee's address.
     */
    address_line1?: string;
    /**
     * The postal code of the employee's address.
     */
    postcode?: string;
    /**
     * The employee's National Insurance number.
     */
    national_insurance_number?: string;
    /**
     * The date the employee started their employment, in YYYY-MM-DD format.
     */
    employment_start_date?: string;
    /**
     * The date the employee's employment ended, in YYYY-MM-DD format (if applicable).
     */
    exit_date?: string;
    /**
     * The date the employee opted out of the pension scheme, in YYYY-MM-DD format (if applicable).
     */
    opt_out_date?: string;
    /**
     * The date the employee opted into the pension scheme, in YYYY-MM-DD format (if applicable).
     */
    opt_in_date?: string;
};

export type Error = {
    /**
     * A descriptive error message.
     */
    error?: string;
};

export type ValidationError = {
    /**
     * A descriptive error message.
     */
    error?: string;
    validation_errors?: Array<{
        /**
         * The name of the field that failed validation.
         */
        field: string;
        /**
         * A descriptive error message.
         */
        message: string;
    }>;
};

export type InitiateUploadBody = {
    /**
     * The filename of the upload.
     */
    filename: string;
    /**
     * The purpose of the file upload. If "contribution", both contributions and enrolments will be processed. If "enrolment", only enrolments will be processed.
     */
    purpose: 'contribution' | 'enrolment';
};

/**
 * The purpose of the file upload. If "contribution", both contributions and enrolments will be processed. If "enrolment", only enrolments will be processed.
 */
export type purpose = 'contribution' | 'enrolment';

export type Upload = {
    /**
     * ID of the upload.
     */
    id: string;
    /**
     * Destination URL where the actual file should be sent, using a PUT request. Only present when status is AwaitingFile. We recommend using the AWS S3 client SDK to perform the upload.
     */
    putDestinationUrl: string | null;
    /**
     * Datetime the upload was created.
     */
    createdAt: string;
    /**
     * Datetime the upload was last updated.
     */
    updatedAt: string;
    /**
     * Datetime of when processing of the file began.
     */
    processingStarted: string | null;
    /**
     * Datetime of when processing of the file ended, or null if it has not ended.
     */
    processingEnded: string | null;
    /**
     * The number of seconds it took to process the file end-to-end (if applicable).
     */
    processingTime: number | null;
    /**
     * The number of errors produced in processing the file. Zero if there are none or processing is not finished. Use the `{upload_id}/errors` endpoint to retrieve detailed information of the errors.
     */
    totalErrors: number;
    /**
     * The number of contributions created during processing. Zero if processing is not finished.
     */
    contributionsCreated: number;
    /**
     * The number of contributions that failed to be created during processing. Zero if processing is not finished.
     */
    contributionsUnprocessed?: number;
    /**
     * The number of contributions that already existed prior to processing, and which have been skipped during processing of the upload. Zero if processing is not finished.
     */
    contributionsAlreadyExisted: number;
    /**
     * The total of employer contributions created for the upload, excluding contributions that already existed. Zero if processing is not finished.
     */
    employerContributions: number;
    /**
     * The total of employee contributions created for the upload, excluding contributions that already existed. Zero if processing is not finished.
     */
    employeeContributions: number;
    /**
     * The total of contributions created for the upload, excluding contributions that already existed. Zero if processing is not finished.
     */
    totalContributions: number;
    /**
     * The filename of the uploaded file (if applicable).
     */
    filename: string | null;
    /**
     * The status of the upload. Error indicates the file was not able to be processed. PartiallyProcessed indicates that some but not all contributions or enrolments were created. To retrieve the errors for an Error or PartiallyProcessed file upload, use the `/upload/{upload_id}/errors` endpoint.
     */
    status: 'AwaitingFile' | 'ReceivedFile' | 'Processing' | 'Processed' | 'Error' | 'Timeout' | 'PartiallyProcessed';
};

/**
 * The status of the upload. Error indicates the file was not able to be processed. PartiallyProcessed indicates that some but not all contributions or enrolments were created. To retrieve the errors for an Error or PartiallyProcessed file upload, use the `/upload/{upload_id}/errors` endpoint.
 */
export type status3 = 'AwaitingFile' | 'ReceivedFile' | 'Processing' | 'Processed' | 'Error' | 'Timeout' | 'PartiallyProcessed';

export type PaginatedUploads = {
    /**
     * The current page number.
     */
    pageNumber?: number;
    /**
     * The number of items per page.
     */
    pageSize?: number;
    /**
     * The total number of items available.
     */
    totalItems?: number;
    /**
     * An array of Upload objects on the current page.
     */
    items?: Array<Upload>;
};

export type UploadError = {
    /**
     * ID of the upload where the error occurred.
     */
    upload_id?: string;
    /**
     * The row in the file where the error occurred. Starting at row 1, the first non-header row.
     */
    row_index?: number;
    /**
     * An identifier for the class of the error.
     */
    code?: 'NationalInsuranceNumberInvalid';
    /**
     * Human readable error message to help diagnose the issue.
     */
    message?: string;
};

/**
 * An identifier for the class of the error.
 */
export type code = 'NationalInsuranceNumberInvalid';

export type PaginatedUploadErrors = {
    /**
     * The current page number.
     */
    pageNumber?: number;
    /**
     * The number of items per page.
     */
    pageSize?: number;
    /**
     * The total number of items available.
     */
    totalItems?: number;
    /**
     * An array of UploadError objects on the current page.
     */
    items?: Array<UploadError>;
};

export type ParameteruploadId = string;

export type ParameteremployerId = string;

export type ParameteremployeeId = string;

export type ParametercontributionId = string;

export type Parameterinclude = string;

export type Parameterfields = string;

export type Parametersort = string;

export type Parameterdirection = string;

export type Parameterfilter = string;

export type Parameteroffset = string;

export type Parameterlimit = string;

export type GetEmployersResponse = PaginatedEmployers;

export type GetEmployersError = ValidationError & Error;

export type PostEmployersData = {
    body: EmployerCreateBody;
};

export type PostEmployersResponse = Employer;

export type PostEmployersError = ValidationError & Error;

export type PatchEmployersByEmployerIdData = {
    body: EmployerUpdateBody;
    path: {
        employer_id: string;
    };
};

export type PatchEmployersByEmployerIdResponse = Employer;

export type PatchEmployersByEmployerIdError = ValidationError & Error;

export type GetEmployersByEmployerIdEmployeesData = {
    path: {
        employer_id: string;
    };
    query?: {
        /**
         * The page number to return in the list of employees.
         */
        pageNumber?: number;
        /**
         * The maximum number of employees to return per page.
         */
        pageSize?: number;
    };
};

export type GetEmployersByEmployerIdEmployeesResponse = PaginatedEmployees;

export type GetEmployersByEmployerIdEmployeesError = Error;

export type PostEmployersByEmployerIdEmployeesData = {
    /**
     * Employee creation data.
     */
    body: EmployeeCreateBody;
    path: {
        employer_id: string;
    };
};

export type PostEmployersByEmployerIdEmployeesResponse = Employee;

export type PostEmployersByEmployerIdEmployeesError = ValidationError & Error;

export type PatchEmployersByEmployerIdEmployeesByEmployeeIdData = {
    /**
     * Employee update data.
     */
    body: EmployeeUpdateBody;
    path: {
        employee_id: string;
        employer_id: string;
    };
};

export type PatchEmployersByEmployerIdEmployeesByEmployeeIdResponse = Employee;

export type PatchEmployersByEmployerIdEmployeesByEmployeeIdError = ValidationError & Error;

export type GetEmployersByEmployerIdEmployeesByEmployeeIdContributionsData = {
    path: {
        employee_id: string;
        employer_id: string;
    };
    query?: {
        /**
         * The page number to return in the list of contributions.
         */
        pageNumber?: number;
        /**
         * The maximum number of contributions to return per page.
         */
        pageSize?: number;
    };
};

export type GetEmployersByEmployerIdEmployeesByEmployeeIdContributionsResponse = PaginatedContributions;

export type GetEmployersByEmployerIdEmployeesByEmployeeIdContributionsError = Error;

export type GetEmployersByEmployerIdContributionsData = {
    path: {
        employer_id: string;
    };
    query?: {
        /**
         * The page number to return in the list of contributions.
         */
        pageNumber?: number;
        /**
         * The maximum number of contributions to return per page.
         */
        pageSize?: number;
        /**
         * Sort Contributions by date
         */
        sortBy?: 'pay_period_start_date' | 'pay_period_end_date' | 'created_at';
        /**
         * Sort order (ascending or descending)
         */
        sortOrder?: 'asc' | 'desc';
    };
};

export type GetEmployersByEmployerIdContributionsResponse = PaginatedContributions;

export type GetEmployersByEmployerIdContributionsError = Error;

export type PostEmployersByEmployerIdContributionsData = {
    /**
     * An array of ContributionBody objects representing the contributions to be created.
     */
    body: Array<ContributionBody>;
    path: {
        employer_id: string;
    };
};

export type PostEmployersByEmployerIdContributionsResponse = ContributionCreateResponse;

export type PostEmployersByEmployerIdContributionsError = ValidationError & Error;

export type PatchEmployersByEmployerIdContributionsByContributionIdData = {
    body: ContributionUpdateBody;
    path: {
        contribution_id: string;
        employer_id: string;
    };
};

export type PatchEmployersByEmployerIdContributionsByContributionIdResponse = Contribution;

export type PatchEmployersByEmployerIdContributionsByContributionIdError = ValidationError & Error;

export type DeleteEmployersByEmployerIdContributionsByContributionIdData = {
    path: {
        contribution_id: string;
        employer_id: string;
    };
};

export type DeleteEmployersByEmployerIdContributionsByContributionIdResponse = void;

export type DeleteEmployersByEmployerIdContributionsByContributionIdError = Error;

export type PostUploadsData = {
    body: InitiateUploadBody;
    path: {
        employer_id: string;
    };
};

export type PostUploadsResponse = Upload;

export type PostUploadsError = ValidationError & Error;

export type GetUploadsData = {
    query?: {
        /**
         * Get uploads made for the specified employer only. This should be the employer ID from the Employer record, not the "externalReference" of the employer.
         */
        employerId?: string;
        /**
         * The page number to return in the list of records.
         */
        pageNumber?: number;
    };
};

export type GetUploadsResponse = PaginatedUploads;

export type GetUploadsError = ValidationError & Error;

export type GetUploadsByUploadIdData = {
    path: {
        employer_id: string;
        upload_id: string;
    };
};

export type GetUploadsByUploadIdResponse = Upload;

export type GetUploadsByUploadIdError = Error;

export type GetUploadsByUploadIdErrorsData = {
    path: {
        employer_id: string;
        upload_id: string;
    };
    query?: {
        /**
         * The page number to return in the list of records.
         */
        pageNumber?: number;
        /**
         * The maximum number of records to return per page.
         */
        pageSize?: number;
    };
};

export type GetUploadsByUploadIdErrorsResponse = PaginatedUploadErrors;

export type GetUploadsByUploadIdErrorsError = Error;

export type GetUploadsByUploadIdContributionsData = {
    path: {
        employer_id: string;
        upload_id: string;
    };
    query?: {
        /**
         * The page number to return in the list of records.
         */
        pageNumber?: number;
        /**
         * The maximum number of records to return per page.
         */
        pageSize?: number;
    };
};

export type GetUploadsByUploadIdContributionsResponse = PaginatedContributions;

export type GetUploadsByUploadIdContributionsError = Error;

export type GetUploadsByUploadIdEnrolmentsData = {
    path: {
        employer_id: string;
        upload_id: string;
    };
    query?: {
        /**
         * The page number to return in the list of records.
         */
        pageNumber?: number;
        /**
         * The maximum number of records to return per page.
         */
        pageSize?: number;
    };
};

export type GetUploadsByUploadIdEnrolmentsResponse = PaginatedEmployees;

export type GetUploadsByUploadIdEnrolmentsError = Error;

export type $OpenApiTs = {
    '/employers': {
        get: {
            res: {
                /**
                 * List of employers retrieved successfully.
                 */
                '200': PaginatedEmployers;
                /**
                 * Bad request, the request is malformed or contains invalid data.
                 */
                '400': ValidationError;
                /**
                 * Unauthorized, the request requires authentication, and the provided credentials are either missing or incorrect.
                 */
                '401': Error;
            };
        };
        post: {
            req: PostEmployersData;
            res: {
                /**
                 * Employer created successfully.
                 */
                '201': Employer;
                /**
                 * Bad request, the request is malformed or contains invalid data.
                 */
                '400': ValidationError;
                /**
                 * Unauthorized, the request requires authentication, and the provided credentials are either missing or incorrect.
                 */
                '401': Error;
                /**
                 * Employer not found, the specified employer_id does not match any existing employer.
                 */
                '404': Error;
            };
        };
    };
    '/employers/{employer_id}/': {
        patch: {
            req: PatchEmployersByEmployerIdData;
            res: {
                /**
                 * Employer updated successfully.
                 */
                '200': Employer;
                /**
                 * Bad request, the request is malformed or contains invalid data.
                 */
                '400': ValidationError;
                /**
                 * Unauthorized, the request requires authentication, and the provided credentials are either missing or incorrect.
                 */
                '401': Error;
                /**
                 * Employer not found, the specified employer_id does not match any existing employer.
                 */
                '404': Error;
            };
        };
    };
    '/employers/{employer_id}/employees': {
        get: {
            req: GetEmployersByEmployerIdEmployeesData;
            res: {
                /**
                 * A paginated list of employees for the specified employer.
                 */
                '200': PaginatedEmployees;
                /**
                 * Bad request, the request is malformed or contains invalid data.
                 */
                '400': Error;
                /**
                 * Unauthorized, the request requires authentication, and the provided credentials are either missing or incorrect.
                 */
                '401': Error;
                /**
                 * Employer not found, the specified employer_id does not match any existing employer.
                 */
                '404': Error;
            };
        };
        post: {
            req: PostEmployersByEmployerIdEmployeesData;
            res: {
                /**
                 * Successfully created employee, returned as an Employee object.
                 */
                '201': Employee;
                /**
                 * Bad request, the request is malformed or contains invalid data.
                 */
                '400': ValidationError;
                /**
                 * Unauthorized, the request requires authentication, and the provided credentials are either missing or incorrect.
                 */
                '401': Error;
                /**
                 * Employer not found, the specified employer_id does not match any existing employer.
                 */
                '404': Error;
            };
        };
    };
    '/employers/{employer_id}/employees/{employee_id}': {
        patch: {
            req: PatchEmployersByEmployerIdEmployeesByEmployeeIdData;
            res: {
                /**
                 * Successfully updated the employee's information
                 */
                '200': Employee;
                /**
                 * Bad request, the request is malformed or contains invalid data.
                 */
                '400': ValidationError;
                /**
                 * Unauthorized, the request requires authentication, and the provided credentials are either missing or incorrect.
                 */
                '401': Error;
                /**
                 * Employee or employer not found, the specified employee_id or employer_id does not match any existing records.
                 */
                '404': Error;
            };
        };
    };
    '/employers/{employer_id}/employees/{employee_id}/contributions': {
        get: {
            req: GetEmployersByEmployerIdEmployeesByEmployeeIdContributionsData;
            res: {
                /**
                 * A list of contributions for the specified employee.
                 */
                '200': PaginatedContributions;
                /**
                 * Unauthorized, the request requires authentication, and the provided credentials are either missing or incorrect.
                 */
                '401': Error;
                /**
                 * Employee or employer not found, the specified employee_id or employer_id does not match any existing records.
                 */
                '404': Error;
            };
        };
    };
    '/employers/{employer_id}/contributions': {
        get: {
            req: GetEmployersByEmployerIdContributionsData;
            res: {
                /**
                 * A paginated list of contributions for the specified employer.
                 */
                '200': PaginatedContributions;
                /**
                 * Bad request, the request is malformed or contains invalid data.
                 */
                '400': Error;
                /**
                 * Unauthorized, the request requires authentication, and the provided credentials are either missing or incorrect.
                 */
                '401': Error;
                /**
                 * Employer not found, the specified employer_id does not match any existing employer.
                 */
                '404': Error;
            };
        };
        post: {
            req: PostEmployersByEmployerIdContributionsData;
            res: {
                /**
                 * Successfully created contributions, returned as an array of Contribution objects.
                 */
                '201': ContributionCreateResponse;
                /**
                 * Bad request, the request is malformed or contains invalid data.
                 */
                '400': ValidationError;
                /**
                 * Unauthorized, the request requires authentication, and the provided credentials are either missing or incorrect.
                 */
                '401': Error;
                /**
                 * Employer not found, the specified employer_id does not match any existing employer.
                 */
                '404': Error;
            };
        };
    };
    '/employers/{employer_id}/contributions/{contribution_id}': {
        patch: {
            req: PatchEmployersByEmployerIdContributionsByContributionIdData;
            res: {
                /**
                 * Successfully updated the contribution record.
                 */
                '200': Contribution;
                /**
                 * Bad request, the request is malformed or contains invalid data.
                 */
                '400': ValidationError;
                /**
                 * Unauthorized, the request requires authentication, and the provided credentials are either missing or incorrect.
                 */
                '401': Error;
                /**
                 * The requested contribution record or employer not found.
                 */
                '404': Error;
            };
        };
        delete: {
            req: DeleteEmployersByEmployerIdContributionsByContributionIdData;
            res: {
                /**
                 * Successfully deleted the contribution record.
                 */
                '204': void;
                /**
                 * Bad request, the request is malformed or contains invalid data.
                 */
                '400': Error;
                /**
                 * Unauthorized, the request requires authentication, and the provided credentials are either missing or incorrect.
                 */
                '401': Error;
                /**
                 * The requested contribution record or employer not found.
                 */
                '404': Error;
            };
        };
    };
    '/uploads': {
        post: {
            req: PostUploadsData;
            res: {
                /**
                 * Successfully created the upload. The response contains the ID of the upload, that can be used in querying `/uploads/{upload_id}` endpoints.
                 */
                '200': Upload;
                /**
                 * Bad request, the request is malformed or contains invalid data.
                 */
                '400': ValidationError;
                /**
                 * Unauthorized, the request requires authentication, and the provided credentials are either missing or incorrect.
                 */
                '401': Error;
                /**
                 * The employer was not found.
                 */
                '404': Error;
            };
        };
        get: {
            req: GetUploadsData;
            res: {
                /**
                 * Retrieved the uploads successfully.
                 */
                '200': PaginatedUploads;
                /**
                 * Bad request, the request is malformed or contains invalid data.
                 */
                '400': ValidationError;
                /**
                 * Unauthorized, the request requires authentication, and the provided credentials are either missing or incorrect.
                 */
                '401': Error;
                /**
                 * The requested contribution record or employer not found.
                 */
                '404': Error;
            };
        };
    };
    '/uploads/{upload_id}': {
        get: {
            req: GetUploadsByUploadIdData;
            res: {
                /**
                 * Retrieved the upload successfully.
                 */
                '200': Upload;
                /**
                 * Bad request, the request is malformed or contains invalid data.
                 */
                '400': Error;
                /**
                 * Unauthorized, the request requires authentication, and the provided credentials are either missing or incorrect.
                 */
                '401': Error;
                /**
                 * The employer or upload was not found.
                 */
                '404': Error;
            };
        };
    };
    '/uploads/{upload_id}/errors': {
        get: {
            req: GetUploadsByUploadIdErrorsData;
            res: {
                /**
                 * Retrieved the upload errors successfully.
                 */
                '200': PaginatedUploadErrors;
                /**
                 * Bad request, the request is malformed or contains invalid data.
                 */
                '400': Error;
                /**
                 * Unauthorized, the request requires authentication, and the provided credentials are either missing or incorrect.
                 */
                '401': Error;
                /**
                 * The employer or upload was not found.
                 */
                '404': Error;
            };
        };
    };
    '/uploads/{upload_id}/contributions': {
        get: {
            req: GetUploadsByUploadIdContributionsData;
            res: {
                /**
                 * Retrieved the upload contributions successfully.
                 */
                '200': PaginatedContributions;
                /**
                 * Bad request, the request is malformed or contains invalid data.
                 */
                '400': Error;
                /**
                 * Unauthorized, the request requires authentication, and the provided credentials are either missing or incorrect.
                 */
                '401': Error;
                /**
                 * The employer or upload was not found.
                 */
                '404': Error;
            };
        };
    };
    '/uploads/{upload_id}/enrolments': {
        get: {
            req: GetUploadsByUploadIdEnrolmentsData;
            res: {
                /**
                 * Retrieved the upload enrolments successfully.
                 */
                '200': PaginatedEmployees;
                /**
                 * Bad request, the request is malformed or contains invalid data.
                 */
                '400': Error;
                /**
                 * Unauthorized, the request requires authentication, and the provided credentials are either missing or incorrect.
                 */
                '401': Error;
                /**
                 * The employer or upload was not found.
                 */
                '404': Error;
            };
        };
    };
};